import {GeometryView, getSceneObjectGeometry, Scene} from "@xeokit/scene";
import {ClampToEdgeWrapping, LinearEncoding, LinearFilter, TrianglesPrimitive} from "@xeokit/constants";
import {createVec4} from "@xeokit/matrix";
import {SDKError} from "@xeokit/core";

describe('Create and Destroy a SceneModel', () => {

    it('Create and Destroy a SceneModel', () => {

        const scene = new Scene();

        const sceneModel = scene.createModel({
            id: "myModel"
        });

        if (sceneModel instanceof SDKError) {
            throw sceneModel;
        }

        expect(scene.models["myModel"]).toBe(sceneModel);

        const geometry = sceneModel.createGeometry({
            id: "theGeometry",
            primitive: TrianglesPrimitive,
            positions: [
                1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1,
                -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1,
                -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1
            ],
            uvs: [
                1, 0, 0, 0, 0, 1, 1, 1,// v0-v1-v2-v3 front
                0, 0, 0, 1, 1, 1, 1, 0,// v0-v3-v4-v1 right
                1, 1, 1, 0, 0, 0, 0, 1,// v0-v1-v6-v1 top
                1, 0, 0, 0, 0, 1, 1, 1,// v1-v6-v7-v2 left
                0, 1, 1, 1, 1, 0, 0, 0,// v7-v4-v3-v2 bottom
                0, 1, 1, 1, 1, 0, 0, 0 // v4-v7-v6-v1 back
            ],
            indices: [
                0, 1, 2, 0, 2, 3,            // front
                4, 5, 6, 4, 6, 7,            // right
                8, 9, 10, 8, 10, 11,         // top
                12, 13, 14, 12, 14, 15,      // left
                16, 17, 18, 16, 18, 19,      // bottom
                20, 21, 22, 20, 22, 23
            ]
        });

        if (geometry instanceof SDKError) {
            throw geometry;
        }

        expect(geometry).toBeDefined();
        expect(geometry.id).toBe("theGeometry");
        expect(geometry.primitive).toBe(TrianglesPrimitive);
        expect(geometry.geometryBuckets.length).toBe(1);
        expect(geometry.positionsCompressed).toStrictEqual([32762, 51941, 62308, 32762, 58377, 56206, 24851, 57130, 56206, 26835, 51000, 62308, 17703, 53493, 56206, 21494, 48278, 62308, 12031, 47821, 56206, 17246, 44030, 62308, 8394, 40673, 56206, 14524, 38689, 62308, 7147, 32762, 56206, 13583, 32762, 62308, 8394, 24851, 56206, 14524, 26835, 62308, 12031, 17703, 56206, 17246, 21494, 62308, 17703, 12031, 56206, 21494, 17246, 62308, 24851, 8394, 56206, 26835, 14524, 62308, 32762, 7147, 56206, 32762, 13583, 62308, 32762, 44361, 65525, 36349, 43802, 65525, 29175, 43802, 65525, 25945, 42148, 65525, 23376, 39579, 65525, 21722, 36349, 65525, 21163, 32762, 65525, 21722, 29175, 65525, 23376, 25945, 65525, 25945, 23376, 65525, 29175, 21722, 65525, 32762, 21163, 65525, 33881, 36247, 65525, 34899, 35713, 65525, 32762, 36425, 65525, 31643, 36247, 65525, 30625, 35713, 65525, 29811, 34899, 65525, 29277, 33881, 65525, 29099, 32762, 65525, 29277, 31643, 65525, 29811, 30625, 65525, 30625, 29811, 65525, 31643, 29277, 65525, 32762, 29099, 65525, 36349, 21722, 65525, 33881, 29277, 65525, 36247, 33881, 65525, 29048, 31541, 62308, 28845, 32762, 62308, 35713, 34899, 65525, 29582, 30447, 62308, 30447, 29582, 62308, 31541, 29048, 62308, 32762, 28845, 62308, 33983, 29048, 62308, 35077, 29582, 62308, 35942, 30447, 62308, 35942, 35077, 62308, 35077, 35942, 62308, 33983, 36476, 62308, 32762, 36679, 62308, 31541, 36476, 62308, 34899, 29811, 65525, 30447, 35942, 62308, 35713, 30625, 65525, 29582, 35077, 62308, 36247, 31643, 65525, 29048, 33983, 62308, 22409, 32762, 56206, 22918, 29557, 56206, 24393, 26683, 56206, 26683, 24393, 56206, 29557, 22918, 56206, 32762, 22409, 56206, 35967, 22918, 56206, 35967, 42606, 56206, 32762, 43115, 56206, 29557, 42606, 56206, 26683, 41131, 56206, 24393, 38841, 56206, 22918, 35967, 56206, 17729, 32762, 47817, 18467, 28107, 47817, 20603, 23935, 47817, 23935, 20603, 47817, 28107, 18467, 47817, 32762, 17729, 47817, 32762, 47795, 47817, 28107, 47057, 47817, 23935, 44921, 47817, 20603, 41589, 47817, 18467, 37417, 47817, 15262, 32762, 37935, 16126, 27344, 37935, 18619, 22486, 37935, 22486, 18619, 37935, 27344, 16126, 37935, 32762, 15262, 37935, 32762, 50262, 37935, 27344, 49398, 37935, 22486, 46905, 37935, 18619, 43038, 37935, 16126, 38180, 37935, 15262, 32762, 27589, 16126, 27344, 27589, 18619, 22486, 27589, 22486, 18619, 27589, 27344, 16126, 27589, 32762, 15262, 27589, 32762, 50262, 27589, 27344, 49398, 27589, 22486, 46905, 27589, 18619, 43038, 27589, 16126, 38180, 27589, 17729, 32762, 17707, 18467, 28107, 17707, 20603, 23935, 17707, 23935, 20603, 17707, 28107, 18467, 17707, 32762, 17729, 17707, 32762, 47795, 17707, 28107, 47057, 17707, 23935, 44921, 17707, 20603, 41589, 17707, 18467, 37417, 17707, 22409, 32762, 9318, 22918, 29557, 9318, 24393, 26683, 9318, 26683, 24393, 9318, 29557, 22918, 9318, 32762, 22409, 9318, 32762, 43115, 9318, 35967, 42606, 9318, 29557, 42606, 9318, 26683, 41131, 9318, 24393, 38841, 9318, 22918, 35967, 9318, 28845, 32762, 3216, 29048, 31541, 3216, 29582, 30447, 3216, 30447, 29582, 3216, 31541, 29048, 3216, 32762, 28845, 3216, 35967, 22918, 9318, 33983, 29048, 3216, 33983, 36476, 3216, 35077, 35942, 3216, 32762, 36679, 3216, 31541, 36476, 3216, 30447, 35942, 3216, 29582, 35077, 3216, 29048, 33983, 3216, 36247, 33881, 0, 35713, 34899, 0, 34899, 35713, 0, 33881, 36247, 0, 32762, 36425, 0, 31643, 36247, 0, 35077, 29582, 3216, 30625, 35713, 0, 35942, 30447, 3216, 29811, 34899, 0, 35942, 35077, 3216, 29811, 30625, 0, 29277, 31643, 0, 30625, 29811, 0, 31643, 29277, 0, 32762, 29099, 0, 33881, 29277, 0, 34899, 29811, 0, 35713, 30625, 0, 36247, 31643, 0, 36349, 43802, 0, 32762, 44361, 0, 29175, 43802, 0, 25945, 42148, 0, 23376, 39579, 0, 29277, 33881, 0, 21722, 36349, 0, 29099, 32762, 0, 21163, 32762, 0, 21722, 29175, 0, 23376, 25945, 0, 25945, 23376, 0, 29175, 21722, 0, 32762, 21163, 0, 36349, 21722, 0, 32762, 51941, 3216, 26835, 51000, 3216, 21494, 48278, 3216, 17246, 44030, 3216, 14524, 38689, 3216, 13583, 32762, 3216, 14524, 26835, 3216, 17246, 21494, 3216, 21494, 17246, 3216, 26835, 14524, 3216, 32762, 13583, 3216, 32762, 58377, 9318, 24851, 57130, 9318, 17703, 53493, 9318, 12031, 47821, 9318, 8394, 40673, 9318, 7147, 32762, 9318, 8394, 24851, 9318, 12031, 17703, 9318, 17703, 12031, 9318, 24851, 8394, 9318, 32762, 7147, 9318, 32762, 63057, 17707, 23401, 61582, 17707, 14956, 57283, 17707, 8241, 50568, 17707, 3942, 42123, 17707, 2467, 32762, 17707, 3942, 23401, 17707, 8241, 14956, 17707, 14956, 8241, 17707, 23401, 3942, 17707, 32762, 2467, 17707, 32762, 65525, 27589, 22638, 63922, 27589, 13506, 59267, 27589, 6257, 52018, 27589, 1602, 42886, 27589, 0, 32762, 27589, 1602, 22638, 27589, 6257, 13506, 27589, 13506, 6257, 27589, 22638, 1602, 27589, 32762, 0, 27589, 32762, 65525, 37935, 22638, 63922, 37935, 13506, 59267, 37935, 6257, 52018, 37935, 1602, 42886, 37935, 0, 32762, 37935, 1602, 22638, 37935, 6257, 13506, 37935, 13506, 6257, 37935, 22638, 1602, 37935, 32762, 0, 37935, 32762, 63057, 47817, 23401, 61582, 47817, 14956, 57283, 47817]);
        expect(geometry.indices).toStrictEqual([0, 1, 2, 2, 3, 0, 3, 2, 4, 4, 5, 3, 5, 4, 6, 6, 7, 5, 7, 6, 8, 8, 9, 7, 9, 8, 10, 10, 11, 9, 11, 10, 12, 12, 13, 11, 13, 12, 14, 14, 15, 13, 15, 14, 16, 16, 17, 15, 17, 16, 18, 18, 19, 17, 19, 18, 20, 20, 21, 19, 0, 22, 23, 22, 0, 3, 3, 24, 22, 24, 3, 5, 5, 25, 24, 25, 5, 7, 7, 26, 25, 26, 7, 9, 9, 27, 26, 27, 9, 11, 11, 28, 27, 28, 11, 13, 13, 29, 28, 29, 13, 15, 15, 30, 29, 30, 15, 17, 17, 31, 30, 31, 17, 19, 19, 32, 31, 32, 19, 21, 21, 33, 32, 23, 34, 35, 34, 23, 22, 22, 36, 34, 36, 22, 24, 24, 37, 36, 37, 24, 25, 25, 38, 37, 38, 25, 26, 26, 39, 38, 39, 26, 27, 27, 40, 39, 40, 27, 28, 28, 41, 40, 41, 28, 29, 29, 42, 41, 42, 29, 30, 30, 43, 42, 43, 30, 31, 31, 44, 43, 44, 31, 32, 32, 45, 44, 45, 32, 33, 33, 46, 45, 46, 33, 47, 47, 48, 46, 49, 50, 51, 50, 49, 52, 52, 53, 50, 53, 52, 35, 35, 54, 53, 54, 35, 34, 34, 55, 54, 55, 34, 36, 36, 56, 55, 56, 36, 37, 37, 57, 56, 57, 37, 38, 38, 58, 57, 58, 38, 39, 39, 59, 58, 59, 39, 40, 60, 43, 44, 44, 61, 60, 61, 44, 45, 45, 62, 61, 62, 45, 46, 46, 63, 62, 63, 46, 48, 48, 64, 63, 64, 48, 65, 65, 66, 64, 66, 65, 67, 67, 68, 66, 68, 67, 69, 69, 70, 68, 71, 51, 50, 50, 72, 71, 72, 50, 53, 53, 73, 72, 73, 53, 54, 54, 74, 73, 74, 54, 55, 55, 75, 74, 75, 55, 56, 56, 76, 75, 76, 56, 57, 57, 77, 76, 77, 57, 58, 78, 62, 63, 63, 79, 78, 79, 63, 64, 64, 80, 79, 80, 64, 66, 66, 81, 80, 81, 66, 68, 68, 82, 81, 82, 68, 70, 70, 83, 82, 83, 70, 51, 51, 71, 83, 84, 71, 72, 72, 85, 84, 85, 72, 73, 73, 86, 85, 86, 73, 74, 74, 87, 86, 87, 74, 75, 75, 88, 87, 88, 75, 76, 76, 89, 88, 89, 76, 77, 90, 79, 80, 80, 91, 90, 91, 80, 81, 81, 92, 91, 92, 81, 82, 82, 93, 92, 93, 82, 83, 83, 94, 93, 94, 83, 71, 71, 84, 94, 95, 84, 85, 85, 96, 95, 96, 85, 86, 86, 97, 96, 97, 86, 87, 87, 98, 97, 98, 87, 88, 88, 99, 98, 99, 88, 89, 89, 100, 99, 101, 90, 91, 91, 102, 101, 102, 91, 92, 92, 103, 102, 103, 92, 93, 93, 104, 103, 104, 93, 94, 94, 105, 104, 105, 94, 84, 84, 95, 105, 106, 95, 96, 96, 107, 106, 107, 96, 97, 97, 108, 107, 108, 97, 98, 98, 109, 108, 109, 98, 99, 99, 110, 109, 110, 99, 100, 100, 111, 110, 112, 101, 102, 102, 113, 112, 113, 102, 103, 103, 114, 113, 114, 103, 104, 104, 115, 114, 115, 104, 105, 105, 116, 115, 116, 105, 95, 95, 106, 116, 117, 106, 107, 107, 118, 117, 118, 107, 108, 108, 119, 118, 119, 108, 109, 109, 120, 119, 120, 109, 110, 110, 121, 120, 121, 110, 111, 111, 122, 121, 123, 112, 113, 113, 124, 123, 124, 113, 114, 114, 125, 124, 125, 114, 115, 115, 126, 125, 126, 115, 116, 116, 127, 126, 127, 116, 106, 106, 117, 127, 128, 117, 118, 118, 129, 128, 129, 118, 119, 119, 130, 129, 130, 119, 120, 120, 131, 130, 131, 120, 121, 121, 132, 131, 132, 121, 122, 122, 133, 132, 123, 134, 135, 134, 123, 124, 124, 136, 134, 136, 124, 125, 125, 137, 136, 137, 125, 126, 126, 138, 137, 138, 126, 127, 127, 139, 138, 139, 127, 117, 117, 128, 139, 140, 128, 129, 129, 141, 140, 141, 129, 130, 130, 142, 141, 142, 130, 131, 131, 143, 142, 143, 131, 132, 132, 144, 143, 144, 132, 133, 133, 145, 144, 145, 133, 146, 146, 147, 145, 135, 148, 149, 148, 135, 134, 134, 150, 148, 150, 134, 136, 136, 151, 150, 151, 136, 137, 137, 152, 151, 152, 137, 138, 138, 153, 152, 153, 138, 139, 139, 154, 153, 154, 139, 128, 128, 140, 154, 155, 141, 142, 142, 156, 155, 156, 142, 143, 143, 157, 156, 157, 143, 144, 144, 158, 157, 158, 144, 145, 145, 159, 158, 159, 145, 147, 147, 160, 159, 160, 147, 161, 161, 162, 160, 162, 161, 163, 163, 164, 162, 165, 166, 167, 166, 165, 149, 149, 168, 166, 168, 149, 148, 148, 169, 168, 169, 148, 150, 150, 170, 169, 170, 150, 151, 151, 171, 170, 171, 151, 152, 152, 172, 171, 172, 152, 153, 153, 173, 172, 173, 153, 154, 154, 174, 173, 174, 154, 140, 175, 158, 159, 159, 176, 175, 176, 159, 160, 160, 177, 176, 177, 160, 162, 162, 178, 177, 178, 162, 164, 164, 179, 178, 179, 164, 180, 180, 181, 179, 181, 180, 182, 182, 183, 181, 183, 182, 167, 167, 184, 183, 184, 167, 166, 166, 185, 184, 185, 166, 168, 168, 186, 185, 186, 168, 169, 169, 187, 186, 187, 169, 170, 170, 188, 187, 188, 170, 171, 171, 189, 188, 189, 171, 172, 190, 176, 177, 177, 191, 190, 191, 177, 178, 178, 192, 191, 192, 178, 179, 179, 193, 192, 193, 179, 181, 181, 194, 193, 194, 181, 183, 183, 195, 194, 195, 183, 184, 184, 196, 195, 196, 184, 185, 185, 197, 196, 197, 185, 186, 186, 198, 197, 198, 186, 187, 187, 199, 198, 199, 187, 188, 188, 200, 199, 200, 188, 189, 201, 190, 191, 191, 202, 201, 202, 191, 192, 192, 203, 202, 203, 192, 193, 193, 204, 203, 204, 193, 194, 194, 205, 204, 205, 194, 195, 195, 206, 205, 206, 195, 196, 196, 207, 206, 207, 196, 197, 197, 208, 207, 208, 197, 198, 198, 209, 208, 209, 198, 199, 199, 210, 209, 210, 199, 200, 200, 211, 210, 212, 201, 202, 202, 213, 212, 213, 202, 203, 203, 214, 213, 214, 203, 204, 204, 215, 214, 215, 204, 205, 205, 216, 215, 216, 205, 206, 206, 217, 216, 217, 206, 207, 207, 218, 217, 218, 207, 208, 208, 219, 218, 219, 208, 209, 209, 220, 219, 220, 209, 210, 210, 221, 220, 221, 210, 211, 211, 222, 221, 223, 212, 213, 213, 224, 223, 224, 213, 214, 214, 225, 224, 225, 214, 215, 215, 226, 225, 226, 215, 216, 216, 227, 226, 227, 216, 217, 217, 228, 227, 228, 217, 218, 218, 229, 228, 229, 218, 219, 219, 230, 229, 230, 219, 220, 220, 231, 230, 231, 220, 221, 221, 232, 231, 232, 221, 222, 222, 233, 232, 234, 223, 224, 224, 235, 234, 235, 224, 225, 225, 236, 235, 236, 225, 226, 226, 237, 236, 237, 226, 227, 227, 238, 237, 238, 227, 228, 228, 239, 238, 239, 228, 229, 229, 240, 239, 240, 229, 230, 230, 241, 240, 241, 230, 231, 231, 242, 241, 242, 231, 232, 232, 243, 242, 243, 232, 233, 233, 244, 243, 245, 234, 235, 235, 246, 245, 246, 235, 236, 236, 247, 246, 247, 236, 237]);
        // expect(geometry.positionsCompressed).toStrictEqual([6257, 52018, 37935, 8241, 50568, 47817, 14956, 57283, 47817, 1602, 42886, 37935, 3942, 42123, 47817, 0, 32762, 37935, 2467, 32762, 47817, 1602, 22638, 37935, 3942, 23401, 47817, 6257, 13506, 37935, 8241, 14956, 47817, 13506, 6257, 37935, 14956, 8241, 47817, 22638, 1602, 37935, 23401, 3942, 47817, 32762, 0, 37935, 32762, 2467, 47817, 32762, 58377, 56206, 32762, 63057, 47817, 23401, 61582, 47817, 24851, 57130, 56206, 17703, 53493, 56206, 12031, 47821, 56206, 8394, 40673, 56206, 7147, 32762, 56206, 8394, 24851, 56206, 12031, 17703, 56206, 17703, 12031, 56206, 24851, 8394, 56206, 32762, 7147, 56206, 38689, 51000, 62308, 40673, 57130, 56206, 32762, 51941, 62308, 32762, 13583, 62308, 40673, 8394, 56206, 38689, 14524, 62308, 36349, 43802, 65525, 39579, 42148, 65525, 32762, 21163, 65525, 36349, 21722, 65525, 44030, 17246, 62308, 39579, 23376, 65525, 43802, 36349, 65525, 36247, 33881, 65525, 36425, 32762, 65525, 42148, 39579, 65525, 35713, 34899, 65525, 34899, 35713, 65525, 33881, 29277, 65525, 34899, 29811, 65525, 42148, 25945, 65525, 35713, 30625, 65525, 43802, 29175, 65525, 36247, 31643, 65525, 44361, 32762, 65525, 28845, 32762, 62308, 29277, 33881, 65525, 36476, 31541, 62308, 35942, 30447, 62308, 29099, 32762, 65525, 36679, 32762, 62308, 29277, 31643, 65525, 36476, 33983, 62308, 29811, 30625, 65525, 35942, 35077, 62308, 29048, 33983, 62308, 35077, 29582, 62308, 38841, 24393, 56206, 35967, 22918, 56206, 41131, 26683, 56206, 42606, 35967, 56206, 41131, 38841, 56206, 35077, 35942, 62308, 38841, 41131, 56206, 33983, 36476, 62308, 35967, 42606, 56206, 37417, 18467, 47817, 32762, 17729, 47817, 41589, 44921, 47817, 37417, 47057, 47817, 32762, 43115, 56206, 32762, 47795, 47817, 32762, 15262, 37935, 38180, 16126, 37935, 38180, 49398, 37935, 32762, 50262, 37935, 32762, 15262, 27589, 38180, 16126, 27589, 38180, 49398, 27589, 32762, 50262, 27589, 32762, 17729, 17707, 37417, 18467, 17707, 37417, 47057, 17707, 32762, 47795, 17707, 32762, 22409, 9318, 35967, 22918, 9318, 41589, 20603, 17707, 38841, 24393, 9318, 35967, 42606, 9318, 38841, 41131, 9318, 33983, 29048, 3216, 35077, 29582, 3216, 41131, 26683, 9318, 35942, 30447, 3216, 42606, 29557, 9318, 36476, 31541, 3216, 41131, 38841, 9318, 35942, 35077, 3216, 36476, 33983, 3216, 35077, 35942, 3216, 36425, 32762, 0, 28845, 32762, 3216, 29048, 31541, 3216, 36247, 33881, 0, 29811, 34899, 0, 29277, 33881, 0, 36679, 32762, 3216, 29099, 32762, 0, 29277, 31643, 0, 36247, 31643, 0, 44361, 32762, 0, 43802, 36349, 0, 35713, 34899, 0, 42148, 39579, 0, 34899, 35713, 0, 39579, 42148, 0, 33881, 36247, 0, 36349, 43802, 0, 34899, 29811, 0, 39579, 23376, 0, 36349, 21722, 0, 35713, 30625, 0, 42148, 25945, 0, 43802, 29175, 0, 44030, 48278, 3216, 38689, 51000, 3216, 32762, 44361, 0, 32762, 51941, 3216, 38689, 14524, 3216, 32762, 13583, 3216, 40673, 57130, 9318, 32762, 58377, 9318, 32762, 7147, 9318, 40673, 8394, 9318, 42123, 61582, 17707, 32762, 63057, 17707, 32762, 2467, 17707, 42123, 3942, 17707, 42886, 63922, 27589, 32762, 65525, 27589, 32762, 0, 27589, 42886, 1602, 27589, 42886, 63922, 37935, 32762, 65525, 37935, 42886, 1602, 37935, 42123, 61582, 47817, 42123, 3942, 47817, 51941, 32762, 62308, 58377, 32762, 56206, 57130, 40673, 56206, 51000, 38689, 62308, 53493, 47821, 56206, 48278, 44030, 62308, 47821, 53493, 56206, 44030, 48278, 62308, 47821, 12031, 56206, 53493, 17703, 56206, 48278, 21494, 62308, 57130, 24851, 56206, 51000, 26835, 62308, 42606, 29557, 56206, 43115, 32762, 56206, 41589, 20603, 47817, 44921, 23935, 47817, 47057, 28107, 47817, 47795, 32762, 47817, 47057, 37417, 47817, 44921, 41589, 47817, 43038, 18619, 37935, 46905, 22486, 37935, 49398, 27344, 37935, 50262, 32762, 37935, 49398, 38180, 37935, 46905, 43038, 37935, 43038, 46905, 37935, 43038, 18619, 27589, 46905, 22486, 27589, 49398, 27344, 27589, 50262, 32762, 27589, 49398, 38180, 27589, 46905, 43038, 27589, 43038, 46905, 27589, 44921, 23935, 17707, 47057, 28107, 17707, 47795, 32762, 17707, 47057, 37417, 17707, 44921, 41589, 17707, 41589, 44921, 17707, 43115, 32762, 9318, 42606, 35967, 9318, 51941, 32762, 3216, 51000, 38689, 3216, 48278, 44030, 3216, 44030, 17246, 3216, 48278, 21494, 3216, 51000, 26835, 3216, 58377, 32762, 9318, 57130, 40673, 9318, 53493, 47821, 9318, 47821, 53493, 9318, 47821, 12031, 9318, 53493, 17703, 9318, 57130, 24851, 9318, 63057, 32762, 17707, 61582, 42123, 17707, 57283, 50568, 17707, 50568, 57283, 17707, 50568, 8241, 17707, 57283, 14956, 17707, 61582, 23401, 17707, 65525, 32762, 27589, 63922, 42886, 27589, 59267, 52018, 27589, 52018, 59267, 27589, 52018, 6257, 27589, 59267, 13506, 27589, 63922, 22638, 27589, 65525, 32762, 37935, 63922, 42886, 37935, 59267, 52018, 37935, 52018, 59267, 37935, 52018, 6257, 37935, 59267, 13506, 37935, 63922, 22638, 37935, 63057, 32762, 47817, 61582, 42123, 47817, 57283, 50568, 47817, 50568, 57283, 47817, 50568, 8241, 47817, 57283, 14956, 47817, 61582, 23401, 47817]);
        // expect(geometryindices).toStrictEqual([0, 1, 2, 1, 0, 3, 3, 4, 1, 4, 3, 5, 5, 6, 4, 6, 5, 7, 7, 8, 6, 8, 7, 9, 9, 10, 8, 10, 9, 11, 11, 12, 10, 12, 11, 13, 13, 14, 12, 14, 13, 15, 15, 16, 14, 17, 18, 19, 19, 20, 17, 20, 19, 2, 2, 21, 20, 21, 2, 1, 1, 22, 21, 22, 1, 4, 4, 23, 22, 23, 4, 6, 6, 24, 23, 24, 6, 8, 8, 25, 24, 25, 8, 10, 10, 26, 25, 26, 10, 12, 12, 27, 26, 27, 12, 14, 14, 28, 27, 28, 14, 16, 16, 29, 28, 30, 31, 17, 17, 32, 30, 33, 29, 34, 34, 35, 33, 30, 36, 37, 36, 30, 32, 38, 33, 35, 35, 39, 38, 39, 35, 40, 40, 41, 39, 42, 43, 44, 43, 42, 45, 45, 46, 43, 46, 45, 37, 37, 47, 46, 47, 37, 36, 48, 39, 41, 41, 49, 48, 49, 41, 50, 50, 51, 49, 51, 50, 52, 52, 53, 51, 53, 52, 54, 54, 44, 53, 55, 44, 43, 56, 57, 58, 57, 56, 59, 59, 60, 57, 60, 59, 61, 61, 62, 60, 62, 61, 63, 63, 64, 62, 65, 53, 44, 44, 55, 65, 66, 67, 68, 67, 66, 58, 58, 69, 67, 69, 58, 57, 70, 62, 64, 64, 71, 70, 71, 64, 72, 72, 73, 71, 73, 72, 74, 74, 75, 73, 68, 76, 77, 76, 68, 67, 78, 73, 75, 75, 79, 78, 79, 75, 80, 80, 81, 79, 82, 77, 76, 76, 83, 82, 84, 79, 81, 81, 85, 84, 86, 82, 83, 83, 87, 86, 88, 84, 85, 85, 89, 88, 90, 86, 87, 87, 91, 90, 92, 88, 89, 89, 93, 92, 94, 90, 91, 91, 95, 94, 95, 91, 96, 96, 97, 95, 92, 98, 99, 98, 92, 93, 100, 95, 97, 97, 101, 100, 101, 97, 102, 102, 103, 101, 103, 102, 104, 104, 105, 103, 106, 107, 108, 107, 106, 99, 99, 109, 107, 109, 99, 98, 110, 111, 112, 112, 113, 110, 114, 103, 105, 105, 115, 114, 115, 105, 116, 116, 117, 115, 117, 116, 108, 108, 118, 117, 118, 108, 107, 111, 110, 119, 120, 110, 113, 113, 121, 120, 121, 113, 122, 122, 123, 121, 123, 122, 124, 124, 125, 123, 125, 124, 126, 126, 127, 125, 128, 129, 130, 129, 128, 131, 131, 132, 129, 132, 131, 119, 119, 133, 132, 133, 119, 110, 134, 125, 127, 127, 135, 134, 135, 127, 136, 136, 137, 135, 130, 138, 139, 138, 130, 129, 140, 135, 137, 137, 141, 140, 142, 139, 138, 138, 143, 142, 144, 140, 141, 141, 145, 144, 146, 142, 143, 143, 147, 146, 148, 144, 145, 145, 149, 148, 150, 146, 147, 147, 151, 150, 152, 148, 149, 149, 153, 152, 15, 150, 151, 151, 154, 15, 155, 152, 153, 153, 18, 155, 16, 15, 154, 154, 156, 16, 31, 155, 18, 18, 17, 31, 29, 16, 156, 156, 34, 29, 157, 158, 159, 159, 160, 157, 160, 159, 161, 161, 162, 160, 162, 161, 163, 163, 164, 162, 164, 163, 31, 31, 30, 164, 35, 34, 165, 165, 40, 35, 40, 165, 166, 166, 167, 40, 167, 166, 168, 168, 169, 167, 169, 168, 158, 158, 157, 169, 54, 157, 160, 160, 42, 54, 42, 160, 162, 162, 45, 42, 45, 162, 164, 164, 37, 45, 37, 164, 30, 41, 40, 167, 167, 50, 41, 50, 167, 169, 169, 52, 50, 52, 169, 157, 157, 54, 52, 44, 54, 42, 57, 170, 69, 170, 57, 60, 60, 171, 170, 171, 60, 62, 62, 70, 171, 67, 172, 76, 172, 67, 69, 69, 173, 172, 173, 69, 170, 170, 174, 173, 174, 170, 171, 171, 175, 174, 175, 171, 70, 70, 176, 175, 176, 70, 71, 71, 177, 176, 177, 71, 73, 73, 78, 177, 83, 76, 172, 172, 178, 83, 178, 172, 173, 173, 179, 178, 179, 173, 174, 174, 180, 179, 180, 174, 175, 175, 181, 180, 181, 175, 176, 176, 182, 181, 182, 176, 177, 177, 183, 182, 183, 177, 78, 78, 184, 183, 184, 78, 79, 79, 84, 184, 87, 83, 178, 178, 185, 87, 185, 178, 179, 179, 186, 185, 186, 179, 180, 180, 187, 186, 187, 180, 181, 181, 188, 187, 188, 181, 182, 182, 189, 188, 189, 182, 183, 183, 190, 189, 190, 183, 184, 184, 191, 190, 191, 184, 84, 84, 88, 191, 91, 87, 185, 185, 96, 91, 96, 185, 186, 186, 192, 96, 192, 186, 187, 187, 193, 192, 193, 187, 188, 188, 194, 193, 194, 188, 189, 189, 195, 194, 195, 189, 190, 190, 196, 195, 196, 190, 191, 191, 197, 196, 197, 191, 88, 88, 92, 197, 97, 96, 192, 192, 102, 97, 102, 192, 193, 193, 104, 102, 104, 193, 194, 194, 198, 104, 198, 194, 195, 195, 199, 198, 199, 195, 196, 196, 106, 199, 106, 196, 197, 197, 99, 106, 99, 197, 92, 105, 104, 198, 198, 116, 105, 116, 198, 199, 199, 108, 116, 108, 199, 106, 110, 120, 133, 200, 120, 121, 121, 201, 200, 201, 121, 123, 123, 202, 201, 202, 123, 125, 125, 134, 202, 129, 203, 138, 203, 129, 132, 132, 204, 203, 204, 132, 133, 133, 205, 204, 205, 133, 120, 120, 200, 205, 206, 200, 201, 201, 207, 206, 207, 201, 202, 202, 208, 207, 208, 202, 134, 134, 209, 208, 209, 134, 135, 135, 140, 209, 143, 138, 203, 203, 210, 143, 210, 203, 204, 204, 211, 210, 211, 204, 205, 205, 212, 211, 212, 205, 200, 200, 206, 212, 213, 206, 207, 207, 214, 213, 214, 207, 208, 208, 215, 214, 215, 208, 209, 209, 216, 215, 216, 209, 140, 140, 144, 216, 147, 143, 210, 210, 217, 147, 217, 210, 211, 211, 218, 217, 218, 211, 212, 212, 219, 218, 219, 212, 206, 206, 213, 219, 220, 213, 214, 214, 221, 220, 221, 214, 215, 215, 222, 221, 222, 215, 216, 216, 223, 222, 223, 216, 144, 144, 148, 223, 151, 147, 217, 217, 224, 151, 224, 217, 218, 218, 225, 224, 225, 218, 219, 219, 226, 225, 226, 219, 213, 213, 220, 226, 227, 220, 221, 221, 228, 227, 228, 221, 222, 222, 229, 228, 229, 222, 223, 223, 230, 229, 230, 223, 148, 148, 152, 230, 154, 151, 224, 224, 231, 154, 231, 224, 225, 225, 232, 231, 232, 225, 226, 226, 233, 232, 233, 226, 220, 220, 227, 233, 234, 227, 228, 228, 235, 234, 235, 228, 229, 229, 236, 235, 236, 229, 230, 230, 237, 236, 237, 230, 152, 152, 155, 237, 156, 154, 231, 231, 238, 156, 238, 231, 232, 232, 239, 238, 239, 232, 233, 233, 240, 239, 240, 233, 227, 227, 234, 240, 158, 234, 235, 235, 159, 158, 159, 235, 236, 236, 161, 159, 161, 236, 237, 237, 163, 161, 163, 237, 155, 155, 31, 163, 34, 156, 238, 238, 165, 34, 165, 238, 239, 239, 166, 165, 166, 239, 240, 240, 168, 166, 168, 240, 234, 234, 158, 168]);

        const texture = sceneModel.createTexture({
            id: "colorTexture",
            src: "./assets/bim_icon.png",
            preloadColor: [1, 0, 0, 1],
            flipY: false,
            encoding: LinearEncoding,
            magFilter: LinearFilter,
            minFilter: LinearFilter,
            wrapR: ClampToEdgeWrapping,
            wrapS: ClampToEdgeWrapping,
            wrapT: ClampToEdgeWrapping,
        });

        if (texture instanceof SDKError) {
            throw texture;
        }

        expect(sceneModel.textures["colorTexture"]).toBeDefined();
        expect(texture.id).toStrictEqual("colorTexture");
        expect(texture.src).toStrictEqual("./assets/bim_icon.png");
        expect(texture.preloadColor).toStrictEqual(createVec4([1, 0, 0, 1]));
        expect(texture.encoding).toStrictEqual(LinearEncoding);
        expect(texture.magFilter).toStrictEqual(LinearFilter);
        expect(texture.minFilter).toStrictEqual(LinearFilter);
        expect(texture.wrapR).toStrictEqual(ClampToEdgeWrapping);
        expect(texture.wrapS).toStrictEqual(ClampToEdgeWrapping);
        expect(texture.wrapT).toStrictEqual(ClampToEdgeWrapping);

        const theTextureSet = sceneModel.createTextureSet({
            id: "theTextureSet",
            colorTextureId: "colorTexture"
        });

        if (theTextureSet instanceof SDKError) {
            throw theTextureSet;
        }

        expect(sceneModel.textureSets["theTextureSet"]).toBeDefined();
        expect(theTextureSet.id).toStrictEqual("theTextureSet");
        expect(theTextureSet.colorTexture).toBeDefined();
        expect(theTextureSet.colorTexture.id).toStrictEqual(texture.id);

        const redLegMesh = sceneModel.createMesh({
            id: "redLegMesh",
            geometryId: "theGeometry",
            position: [-4, -6, -4],
            scale: [1, 3, 1],
            rotation: [0, 0, 0],
            color: [1, 0.3, 0.3],
            textureSetId: "theTextureSet"
        });

        if (redLegMesh instanceof SDKError) {
            throw redLegMesh;
        }

        expect(sceneModel.meshes["redLegMesh"]).toBeDefined();
        expect(redLegMesh.id).toStrictEqual("redLegMesh");
        expect(redLegMesh.textureSet).toBeDefined();
        expect(redLegMesh.textureSet.id).toStrictEqual(theTextureSet.id);

        const greenLegMesh = sceneModel.createMesh({
            id: "greenLegMesh",
            geometryId: "theGeometry",
            position: [4, -6, -4],
            scale: [1, 3, 1],
            rotation: [0, 0, 0],
            color: [0.3, 1.0, 0.3],
            textureSetId: "theTextureSet"
        });

        if (greenLegMesh instanceof SDKError) {
            throw greenLegMesh;
        }

        expect(sceneModel.meshes["greenLegMesh"]).toBeDefined();
        expect(greenLegMesh.id).toStrictEqual("greenLegMesh");
        expect(greenLegMesh.textureSet).toBeDefined();
        expect(greenLegMesh.textureSet.id).toStrictEqual(theTextureSet.id);

        const blueLegMesh = sceneModel.createMesh({
            id: "blueLegMesh",
            geometryId: "theGeometry",
            position: [4, -6, 4],
            scale: [1, 3, 1],
            rotation: [0, 0, 0],
            color: [0.3, 0.3, 1.0],
            textureSetId: "theTextureSet"
        });

        if (blueLegMesh instanceof SDKError) {
            throw blueLegMesh;
        }

        expect(sceneModel.meshes["blueLegMesh"]).toBeDefined();
        expect(blueLegMesh.id).toStrictEqual("blueLegMesh");
        expect(blueLegMesh.textureSet).toBeDefined();
        expect(blueLegMesh.textureSet.id).toStrictEqual(theTextureSet.id);

        const yellowLegMesh = sceneModel.createMesh({
            id: "yellowLegMesh",
            geometryId: "theGeometry",
            position: [-4, -6, 4],
            scale: [1, 3, 1],
            rotation: [0, 0, 0],
            color: [1.0, 1.0, 0.0],
            textureSetId: "theTextureSet"
        });

        if (yellowLegMesh instanceof SDKError) {
            throw blueLegMesh;
        }

        expect(sceneModel.meshes["yellowLegMesh"]).toBeDefined();
        expect(yellowLegMesh.id).toStrictEqual("yellowLegMesh");
        expect(yellowLegMesh.textureSet).toBeDefined();
        expect(yellowLegMesh.textureSet.id).toStrictEqual(theTextureSet.id);

        const tableTopMesh = sceneModel.createMesh({
            id: "tableTopMesh",
            geometryId: "theGeometry",
            position: [0, -3, 0],
            scale: [6, 0.5, 6],
            rotation: [0, 0, 0],
            color: [1.0, 0.3, 1.0],
            textureSetId: "theTextureSet"
        });

        if (tableTopMesh instanceof SDKError) {
            throw tableTopMesh;
        }

        expect(sceneModel.meshes["tableTopMesh"]).toBeDefined();
        expect(tableTopMesh.id).toStrictEqual("tableTopMesh");
        expect(tableTopMesh.textureSet).toBeDefined();
        expect(tableTopMesh.textureSet.id).toStrictEqual(theTextureSet.id);

        // Create five SceneObjects, each using a SceneMesh
        // - A SceneMesh belongs to exactly one SceneObject

        const redLegSceneObject = sceneModel.createObject({
            id: "redLegSceneObject",
            meshIds: ["redLegMesh"]
        });

        if (redLegSceneObject instanceof SDKError) {
            throw redLegSceneObject;
        }

        expect(sceneModel.objects["redLegSceneObject"]).toBeDefined();
        expect(redLegSceneObject.id).toStrictEqual("redLegSceneObject");
        expect(redLegSceneObject.meshes).toBeDefined();
        expect(redLegSceneObject.meshes[0].id).toStrictEqual(redLegMesh.id);

        const greenLegSceneObject = sceneModel.createObject({
            id: "greenLegSceneObject",
            meshIds: ["greenLegMesh"]
        });

        if (greenLegSceneObject instanceof SDKError) {
            throw greenLegSceneObject;
        }

        expect(sceneModel.objects["greenLegSceneObject"]).toBeDefined();
        expect(greenLegSceneObject.id).toStrictEqual("greenLegSceneObject");
        expect(greenLegSceneObject.meshes).toBeDefined();
        expect(greenLegSceneObject.meshes[0].id).toStrictEqual(greenLegMesh.id);

        const blueLegSceneObject = sceneModel.createObject({
            id: "blueLegSceneObject",
            meshIds: ["blueLegMesh"]
        });

        if (blueLegSceneObject instanceof SDKError) {
            throw blueLegSceneObject;
        }

        expect(sceneModel.objects["blueLegSceneObject"]).toBeDefined();
        expect(blueLegSceneObject.id).toStrictEqual("blueLegSceneObject");
        expect(blueLegSceneObject.meshes).toBeDefined();
        expect(blueLegSceneObject.meshes[0].id).toStrictEqual(blueLegMesh.id);

        const yellowLegSceneObject = sceneModel.createObject({
            id: "yellowLegSceneObject",
            meshIds: ["yellowLegMesh"]
        });

        if (yellowLegSceneObject instanceof SDKError) {
            throw yellowLegSceneObject;
        }

        expect(sceneModel.objects["yellowLegSceneObject"]).toBeDefined();
        expect(yellowLegSceneObject.id).toStrictEqual("yellowLegSceneObject");
        expect(yellowLegSceneObject.meshes).toBeDefined();
        expect(yellowLegSceneObject.meshes[0].id).toStrictEqual(yellowLegMesh.id);

        const tableTopSceneObject = sceneModel.createObject({
            id: "tableTopSceneObject",
            meshIds: ["tableTopMesh"]
        });

        if (tableTopSceneObject instanceof SDKError) {
            throw tableTopSceneObject;
        }

        expect(sceneModel.objects["tableTopSceneObject"]).toBeDefined();
        expect(tableTopSceneObject.id).toStrictEqual("tableTopSceneObject");
        expect(tableTopSceneObject.meshes).toBeDefined();
        expect(tableTopSceneObject.meshes[0].id).toStrictEqual(tableTopMesh.id);

        sceneModel.onBuilt.subscribe((theSceneModel) => {
            expect(theSceneModel.built).toStrictEqual(true);
        });

        sceneModel.onDestroyed.subscribe((theSceneModel) => {
            expect(theSceneModel.destroyed).toStrictEqual(true);
            expect(scene.models[theSceneModel.id]).toBeUndefined();
        });

        sceneModel
            .build()
            .then(() => {


                getSceneObjectGeometry(yellowLegSceneObject, (geometryView: GeometryView): boolean | undefined => {

                    expect(geometryView).toBeUndefined();

                    return;
                });

            });

        // sceneModel
        //     .build()
        //     .then(() => {
        //         expect(sceneModel.built).toStrictEqual(false);
        //
        //         sceneModel.destroy();
        //     })
        //     .catch((e) => {
        //         console.log(e);
        //         throw e;
        //     });
    });
});
